{"ast":null,"code":"import _classCallCheck from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\src\\\\components\\\\AdminUpperMenuTab.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n\nvar AdminUpperMenuTab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AdminUpperMenuTab, _React$Component);\n\n  //storing all menu item reference\n  //store the selection sequence\n  function AdminUpperMenuTab(props) {\n    var _this;\n\n    _classCallCheck(this, AdminUpperMenuTab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminUpperMenuTab).call(this, props));\n    _this.inputRefs = [];\n    _this.inputRefsTab = [];\n    _this.index = 0;\n    _this.changeTab = _this.changeTab.bind(_assertThisInitialized(_this));\n    _this.updateUpperTabstyle = _this.updateUpperTabstyle.bind(_assertThisInitialized(_this));\n    return _this;\n  } //setting refs for all the tabs\n\n\n  _createClass(AdminUpperMenuTab, [{\n    key: \"setRefs\",\n    value: function setRefs(ree, key) {\n      this.inputRefs[key] = ree;\n    } //handling the click of tab\n\n  }, {\n    key: \"removeTab\",\n    value: function removeTab(num) {\n      var lastCLicked = null;\n      var lastOne = null;\n      var oldArray = this.props.tabList;\n      var temp = [];\n      var j = 0;\n\n      for (var i = 0; i < oldArray.length; i++) {\n        if (i !== num) {\n          temp[j] = oldArray[i];\n          j += 1;\n        }\n\n        if (i === num - 1) {\n          lastOne = oldArray[i];\n          lastCLicked = i;\n        }\n      } //if removed one is first element\n\n\n      if (num === 0) {\n        lastCLicked = -1;\n      }\n\n      console.log(\"removing tab\", this.props.tabList[num], lastCLicked); //setting the css on tab heads on removal if removing the tab that is selected\n\n      if (num === this.props.user1.selected) {\n        this.props.closeTabSelectedOne(lastCLicked, oldArray); //handle side nav and all detail view\n\n        this.props.removeHeader(temp, this.props.tabList[num], lastOne, true);\n      } else {\n        this.props.closeTabUnselectedOne(num, oldArray); //handle side nav and all detail view\n\n        this.props.removeHeader(temp, this.props.tabList[num], lastOne, false);\n      } //setting state of choosen when the \"setting tab is removed\"\n\n\n      if (this.props.tabList[num] === \"settings\") {\n        this.props.setChoosenValue(-1);\n      } //detaching all values from details if nothing is selected\n\n\n      if (this.props.tabList.length === 1) {\n        this.props.goBackToInitial();\n      }\n    } //setting color of the tab\n\n  }, {\n    key: \"setColor\",\n    value: function setColor(key) {\n      this.props.switchTab(key);\n    }\n  }, {\n    key: \"changeTab\",\n    value: function changeTab(val) {\n      this.props.setDetail(val);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (this.props.tabList.length === 0) {}\n    }\n  }, {\n    key: \"setTabsRef\",\n    value: function setTabsRef(tabRefer, place) {\n      console.log(\"in set tab ref\", place);\n      this.inputRefsTab[place] = tabRefer;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"upper menu tab rendered again \", this.props.user1.previous, this.props.user1.selected);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"AdminUpperMenuTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.props.tabList.map(function (item, key) {\n        return React.createElement(\"div\", {\n          className: \"menuTabs\",\n          id: \"menuTabsId\",\n          ref: function ref(ree) {\n            _this2.setTabsRef(ree, key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"menuTabText\",\n          id: key,\n          onClick: function onClick() {\n            _this2.setColor(key);\n\n            _this2.changeTab(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, item), React.createElement(\"div\", {\n          className: \"crossSign\",\n          ref: function ref(ree) {\n            _this2.setRefs(ree, key);\n          },\n          onClick: function onClick() {\n            _this2.removeTab(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"x\"));\n      }))));\n    } //update upper menu tab style .......paint GREY\n\n  }, {\n    key: \"updateUpperTabstyle\",\n    value: function updateUpperTabstyle() {\n      console.log(\"in update of admin upper menu tab\", this.props.user1.previous, \"....\", this.props.user1.selected);\n\n      try {\n        //change the style of selected tab\n        if (this.props.user1.previous !== this.props.user1.selected) {\n          this.inputRefsTab[this.props.user1.selected].id = \"menuTabsIdClicked\";\n          this.inputRefsTab[this.props.user1.previous].id = \"menuTabsId\";\n        }\n      } catch (e) {\n        //nothing to do\n        console.log(\"error caught\");\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateUpperTabstyle();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateUpperTabstyle();\n    }\n  }]);\n\n  return AdminUpperMenuTab;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user1: state.adminUpperMenu\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setChoosenValue: function setChoosenValue(nam) {\n      dispatch({\n        type: \"toggle\",\n        payload: -1\n      });\n    },\n    switchTab: function switchTab(value) {\n      dispatch({\n        type: \"switchTab\",\n        payload: value\n      });\n    },\n    closeTabSelectedOne: function closeTabSelectedOne(current, array1) {\n      dispatch({\n        type: \"closeTabSelectedOne\",\n        payload: {\n          current: current,\n          array1: array1\n        }\n      });\n    },\n    closeTabUnselectedOne: function closeTabUnselectedOne(current, array1) {\n      dispatch({\n        type: \"closeTabUnselectedOne\",\n        payload: {\n          current: current,\n          array1: array1\n        }\n      });\n    },\n    logout: function logout(val) {\n      dispatch({\n        type: \"logOut\",\n        payload: val\n      });\n    },\n    logoutOnAdmin: function logoutOnAdmin() {\n      dispatch({\n        type: \"logoutOnAdmin\",\n        payload: \" \"\n      });\n    },\n    logoutForSideNav: function logoutForSideNav() {\n      dispatch({\n        type: \"logoutForSideNav\",\n        payload: \" \"\n      });\n    },\n    logoutForUpperMenu: function logoutForUpperMenu() {\n      dispatch({\n        type: \"logoutForUpperMenu\",\n        payload: \" \"\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminUpperMenuTab);","map":{"version":3,"sources":["D:/towards Future/project1/React client/latestReact/src/components/AdminUpperMenuTab.js"],"names":["React","connect","moment","AdminUpperMenuTab","props","inputRefs","inputRefsTab","index","changeTab","bind","updateUpperTabstyle","ree","key","num","lastCLicked","lastOne","oldArray","tabList","temp","j","i","length","console","log","user1","selected","closeTabSelectedOne","removeHeader","closeTabUnselectedOne","setChoosenValue","goBackToInitial","switchTab","val","setDetail","tabRefer","place","previous","map","item","setTabsRef","setColor","setRefs","removeTab","id","e","Component","mapStateToProps","state","adminUpperMenu","mapDispatchToProps","dispatch","nam","type","payload","value","current","array1","logout","logoutOnAdmin","logoutForSideNav","logoutForUpperMenu"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nclass AdminUpperMenuTab extends React.Component {\r\n  //storing all menu item reference\r\n  inputRefs = [];\r\n  inputRefsTab = [];\r\n  index = 0;\r\n\r\n  //store the selection sequence\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.changeTab = this.changeTab.bind(this);\r\n    this.updateUpperTabstyle = this.updateUpperTabstyle.bind(this);\r\n  }\r\n\r\n  //setting refs for all the tabs\r\n  setRefs(ree, key) {\r\n    this.inputRefs[key] = ree;\r\n  }\r\n\r\n  //handling the click of tab\r\n  removeTab(num) {\r\n    let lastCLicked = null;\r\n\r\n    let lastOne = null;\r\n    let oldArray = this.props.tabList;\r\n    let temp = [];\r\n    let j = 0;\r\n    for (let i = 0; i < oldArray.length; i++) {\r\n      if (i !== num) {\r\n        temp[j] = oldArray[i];\r\n\r\n        j += 1;\r\n      }\r\n      if (i === num - 1) {\r\n        lastOne = oldArray[i];\r\n        lastCLicked = i;\r\n      }\r\n    }\r\n\r\n    //if removed one is first element\r\n    if (num === 0) {\r\n      lastCLicked = -1;\r\n    }\r\n\r\n    console.log(\"removing tab\", this.props.tabList[num], lastCLicked);\r\n\r\n    //setting the css on tab heads on removal if removing the tab that is selected\r\n    if (num === this.props.user1.selected) {\r\n      this.props.closeTabSelectedOne(lastCLicked, oldArray);\r\n\r\n      //handle side nav and all detail view\r\n      this.props.removeHeader(temp, this.props.tabList[num], lastOne, true);\r\n    } else {\r\n      this.props.closeTabUnselectedOne(num, oldArray);\r\n\r\n      //handle side nav and all detail view\r\n      this.props.removeHeader(temp, this.props.tabList[num], lastOne, false);\r\n    }\r\n\r\n    //setting state of choosen when the \"setting tab is removed\"\r\n    if (this.props.tabList[num] === \"settings\") {\r\n      this.props.setChoosenValue(-1);\r\n    }\r\n\r\n    //detaching all values from details if nothing is selected\r\n    if (this.props.tabList.length === 1) {\r\n      this.props.goBackToInitial();\r\n    }\r\n  }\r\n\r\n  //setting color of the tab\r\n  setColor(key) {\r\n    this.props.switchTab(key);\r\n  }\r\n\r\n  changeTab(val) {\r\n    this.props.setDetail(val);\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.tabList.length === 0) {\r\n    }\r\n  }\r\n\r\n  setTabsRef(tabRefer, place) {\r\n    console.log(\"in set tab ref\", place);\r\n    this.inputRefsTab[place] = tabRefer;\r\n  }\r\n\r\n  render() {\r\n    console.log(\r\n      \"upper menu tab rendered again \",\r\n      this.props.user1.previous,\r\n      this.props.user1.selected\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <div className=\"AdminUpperMenuTab\">\r\n          <nav>\r\n            {this.props.tabList.map((item, key) => {\r\n              return (\r\n                <div\r\n                  className=\"menuTabs\"\r\n                  id=\"menuTabsId\"\r\n                  ref={ree => {\r\n                    this.setTabsRef(ree, key);\r\n                  }}\r\n                >\r\n                  <p\r\n                    className=\"menuTabText\"\r\n                    id={key}\r\n                    onClick={() => {\r\n                      this.setColor(key);\r\n                      this.changeTab(item);\r\n                    }}\r\n                  >\r\n                    {item}\r\n                  </p>\r\n\r\n                  <div\r\n                    className=\"crossSign\"\r\n                    ref={ree => {\r\n                      this.setRefs(ree, key);\r\n                    }}\r\n                    onClick={() => {\r\n                      this.removeTab(key);\r\n                    }}\r\n                  >\r\n                    x\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </nav>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  //update upper menu tab style .......paint GREY\r\n  updateUpperTabstyle() {\r\n    console.log(\r\n      \"in update of admin upper menu tab\",\r\n      this.props.user1.previous,\r\n      \"....\",\r\n      this.props.user1.selected\r\n    );\r\n\r\n    try {\r\n      //change the style of selected tab\r\n      if (this.props.user1.previous !== this.props.user1.selected) {\r\n        this.inputRefsTab[this.props.user1.selected].id = \"menuTabsIdClicked\";\r\n        this.inputRefsTab[this.props.user1.previous].id = \"menuTabsId\";\r\n      }\r\n    } catch (e) {\r\n      //nothing to do\r\n      console.log(\"error caught\");\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateUpperTabstyle();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateUpperTabstyle();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user1: state.adminUpperMenu\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setChoosenValue: nam => {\r\n      dispatch({\r\n        type: \"toggle\",\r\n        payload: -1\r\n      });\r\n    },\r\n    switchTab: value => {\r\n      dispatch({\r\n        type: \"switchTab\",\r\n        payload: value\r\n      });\r\n    },\r\n    closeTabSelectedOne: (current, array1) => {\r\n      dispatch({\r\n        type: \"closeTabSelectedOne\",\r\n        payload: { current, array1 }\r\n      });\r\n    },\r\n    closeTabUnselectedOne: (current, array1) => {\r\n      dispatch({\r\n        type: \"closeTabUnselectedOne\",\r\n        payload: { current, array1 }\r\n      });\r\n    },\r\n    logout: val => {\r\n      dispatch({\r\n        type: \"logOut\",\r\n        payload: val\r\n      });\r\n    },\r\n    logoutOnAdmin: () => {\r\n      dispatch({\r\n        type: \"logoutOnAdmin\",\r\n        payload: \" \"\r\n      });\r\n    },\r\n    logoutForSideNav: () => {\r\n      dispatch({\r\n        type: \"logoutForSideNav\",\r\n        payload: \" \"\r\n      });\r\n    },\r\n    logoutForUpperMenu: () => {\r\n      dispatch({\r\n        type: \"logoutForUpperMenu\",\r\n        payload: \" \"\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AdminUpperMenuTab);\r\n"]},"metadata":{},"sourceType":"module"}