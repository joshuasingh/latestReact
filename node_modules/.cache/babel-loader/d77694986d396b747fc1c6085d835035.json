{"ast":null,"code":"import _classCallCheck from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\src\\\\components\\\\AdminSideNav.js\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n\nvar AdminSideNav =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AdminSideNav, _React$Component);\n\n  //storing all menu item reference\n  function AdminSideNav(props) {\n    var _this;\n\n    _classCallCheck(this, AdminSideNav);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminSideNav).call(this, props));\n    _this.inputRefs = [];\n    _this.index = 0;\n    _this.LoginTime = null;\n    console.log(\"%c admin side nav const\", \"color:blue;\");\n    _this.state = {\n      menu_items: _this.props.Menu_items,\n      currentSelected: _this.props.current,\n      previousSelected: _this.props.previous,\n      first: 1\n    };\n    _this.sideViewTab = _this.sideViewTab.bind(_assertThisInitialized(_this));\n    _this.updateBackground = _this.updateBackground.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AdminSideNav, [{\n    key: \"setRefs\",\n    value: function setRefs(arg) {\n      this.inputRefs.push(arg);\n    }\n  }, {\n    key: \"putColor\",\n    value: function putColor(index) {\n      this.inputRefs[index].id = \"rowTest_afterClick-admin\"; //change in side nav\n\n      this.props.switchSideTab(index); //for the first click....when nothing is clicked\n      // if (this.state.first === 1) {\n      //   this.setState(prevState => ({\n      //     currentSelected: index,\n      //     previousSelected: index,\n      //     first: 0\n      //   }));\n      // } else {\n      //   this.setState(prevState => ({\n      //     currentSelected: index,\n      //     previousSelected: prevState.currentSelected\n      //   }));\n      // }\n    }\n  }, {\n    key: \"addHeaderFortabs\",\n    value: function addHeaderFortabs(index) {\n      console.log(\"tabs called\");\n      this.props.addHeader(index);\n    } //give the current selected and prev selected to admin component\n\n  }, {\n    key: \"getSelectionValue\",\n    value: function getSelectionValue() {\n      // return [this.state.currentSelected, this.state.previousSelected];\n      return [this.props.user1.currentSelected, this.props.user1.previousSelected];\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      //give the side nav reference to admin page to control it\n      this.props.getStatusFromSN(this); //setting side tab background on first load\n\n      console.log(\"side nav will mount called\");\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateBackground();\n    } //item menu layout\n\n  }, {\n    key: \"sideViewTab\",\n    value: function sideViewTab(val) {\n      return React.createElement(React.Fragment, null, React.createElement(\"h5\", {\n        className: \"sideBarText-admin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, val));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"calling render in admin side nav\");\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"container-fluid-admin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.state.menu_items.map(function (item, index) {\n        return React.createElement(\"div\", {\n          className: \"row-admin\",\n          id: \"rowTest_beforeClick-admin\",\n          ref: function ref(ree) {\n            return _this2.setRefs(ree);\n          },\n          onClick: function onClick(e) {\n            // this.props.changeTheDetail(index);\n            _this2.putColor(index);\n\n            _this2.addHeaderFortabs(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, _this2.sideViewTab(item)));\n      })));\n    }\n  }, {\n    key: \"updateBackground\",\n    value: function updateBackground() {\n      console.log(\"in updateBaccccckground\", this.props.user1.currentSelected, this.props.user1.previousSelected);\n\n      try {\n        if (this.props.user1.currentSelected !== -1) {\n          //setting for the clicked object ID\n          this.inputRefs[this.props.user1.currentSelected].id = \"rowTest_afterClick-admin\";\n\n          if (this.props.user1.previousSelected !== this.props.user1.currentSelected) {\n            console.log(\"checking errrrrrrrrror in side nav\", this.props.user1.previousSelected, this.props.user1.currentSelected); //removing the clicked css from deselected option\n\n            this.inputRefs[this.props.user1.previousSelected].id = \"rowTest_beforeClick-admin\";\n          }\n        } else {\n          //for when all the tab are closed\n          if (this.props.user1.previousSelected !== -1) {\n            //removing the clicked css from deselected option\n            this.inputRefs[this.props.user1.previousSelected].id = \"rowTest_beforeClick-admin\";\n          }\n        }\n      } catch (e) {}\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateBackground();\n    }\n  }]);\n\n  return AdminSideNav;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    //user1: state.adminUpperMen\n    user1: state.adminSideNavRed\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    switchTab: function switchTab(value) {\n      dispatch({\n        type: \"switchTab\",\n        payload: value\n      });\n    },\n    switchSideTab: function switchSideTab(value) {\n      dispatch({\n        type: \"switchSideTab\",\n        payload: value\n      });\n    },\n    setTimeout: function setTimeout(val) {\n      dispatch({\n        type: \"setTimeout\",\n        payload: val\n      });\n    },\n    logoutOnAdmin: function logoutOnAdmin() {\n      dispatch({\n        type: \"logoutOnAdmin\",\n        payload: \" \"\n      });\n    },\n    logoutForSideNav: function logoutForSideNav() {\n      dispatch({\n        type: \"logoutForSideNav\",\n        payload: \" \"\n      });\n    },\n    logoutForUpperMenu: function logoutForUpperMenu() {\n      dispatch({\n        type: \"logoutForUpperMenu\",\n        payload: \" \"\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminSideNav);","map":{"version":3,"sources":["D:/towards Future/project1/React client/latestReact/src/components/AdminSideNav.js"],"names":["React","useState","useEffect","connect","moment","AdminSideNav","props","inputRefs","index","LoginTime","console","log","state","menu_items","Menu_items","currentSelected","current","previousSelected","previous","first","sideViewTab","bind","updateBackground","arg","push","id","switchSideTab","addHeader","user1","getStatusFromSN","val","map","item","ree","setRefs","e","putColor","addHeaderFortabs","Component","mapStateToProps","adminSideNavRed","mapDispatchToProps","dispatch","switchTab","value","type","payload","setTimeout","logoutOnAdmin","logoutForSideNav","logoutForUpperMenu"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nclass AdminSideNav extends React.Component {\r\n  //storing all menu item reference\r\n  inputRefs = [];\r\n  index = 0;\r\n  LoginTime = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(\"%c admin side nav const\", \"color:blue;\");\r\n    this.state = {\r\n      menu_items: this.props.Menu_items,\r\n      currentSelected: this.props.current,\r\n      previousSelected: this.props.previous,\r\n      first: 1\r\n    };\r\n\r\n    this.sideViewTab = this.sideViewTab.bind(this);\r\n    this.updateBackground = this.updateBackground.bind(this);\r\n  }\r\n\r\n  setRefs(arg) {\r\n    this.inputRefs.push(arg);\r\n  }\r\n\r\n  putColor(index) {\r\n    this.inputRefs[index].id = \"rowTest_afterClick-admin\";\r\n\r\n    //change in side nav\r\n    this.props.switchSideTab(index);\r\n\r\n    //for the first click....when nothing is clicked\r\n    // if (this.state.first === 1) {\r\n    //   this.setState(prevState => ({\r\n    //     currentSelected: index,\r\n    //     previousSelected: index,\r\n    //     first: 0\r\n    //   }));\r\n    // } else {\r\n    //   this.setState(prevState => ({\r\n    //     currentSelected: index,\r\n    //     previousSelected: prevState.currentSelected\r\n    //   }));\r\n    // }\r\n  }\r\n\r\n  addHeaderFortabs(index) {\r\n    console.log(\"tabs called\");\r\n    this.props.addHeader(index);\r\n  }\r\n\r\n  //give the current selected and prev selected to admin component\r\n  getSelectionValue() {\r\n    // return [this.state.currentSelected, this.state.previousSelected];\r\n\r\n    return [\r\n      this.props.user1.currentSelected,\r\n      this.props.user1.previousSelected\r\n    ];\r\n  }\r\n\r\n  componentWillMount() {\r\n    //give the side nav reference to admin page to control it\r\n    this.props.getStatusFromSN(this);\r\n\r\n    //setting side tab background on first load\r\n\r\n    console.log(\"side nav will mount called\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateBackground();\r\n  }\r\n\r\n  //item menu layout\r\n  sideViewTab(val) {\r\n    return (\r\n      <>\r\n        <h5 className=\"sideBarText-admin\">{val}</h5>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    console.log(\"calling render in admin side nav\");\r\n    return (\r\n      <>\r\n        <div className=\"container-fluid-admin\">\r\n          {this.state.menu_items.map((item, index) => {\r\n            return (\r\n              <div\r\n                className=\"row-admin\"\r\n                id=\"rowTest_beforeClick-admin\"\r\n                ref={ree => this.setRefs(ree)}\r\n                onClick={e => {\r\n                  // this.props.changeTheDetail(index);\r\n                  this.putColor(index);\r\n                  this.addHeaderFortabs(index);\r\n                }}\r\n              >\r\n                <div className=\"row-sm-4\">{this.sideViewTab(item)}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  updateBackground() {\r\n    console.log(\r\n      \"in updateBaccccckground\",\r\n      this.props.user1.currentSelected,\r\n      this.props.user1.previousSelected\r\n    );\r\n    try {\r\n      if (this.props.user1.currentSelected !== -1) {\r\n        //setting for the clicked object ID\r\n        this.inputRefs[this.props.user1.currentSelected].id =\r\n          \"rowTest_afterClick-admin\";\r\n\r\n        if (\r\n          this.props.user1.previousSelected !== this.props.user1.currentSelected\r\n        ) {\r\n          console.log(\r\n            \"checking errrrrrrrrror in side nav\",\r\n            this.props.user1.previousSelected,\r\n            this.props.user1.currentSelected\r\n          );\r\n          //removing the clicked css from deselected option\r\n          this.inputRefs[this.props.user1.previousSelected].id =\r\n            \"rowTest_beforeClick-admin\";\r\n        }\r\n      } else {\r\n        //for when all the tab are closed\r\n        if (this.props.user1.previousSelected !== -1) {\r\n          //removing the clicked css from deselected option\r\n          this.inputRefs[this.props.user1.previousSelected].id =\r\n            \"rowTest_beforeClick-admin\";\r\n        }\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateBackground();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    //user1: state.adminUpperMen\r\n    user1: state.adminSideNavRed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    switchTab: value => {\r\n      dispatch({\r\n        type: \"switchTab\",\r\n        payload: value\r\n      });\r\n    },\r\n    switchSideTab: value => {\r\n      dispatch({\r\n        type: \"switchSideTab\",\r\n        payload: value\r\n      });\r\n    },\r\n    setTimeout: val => {\r\n      dispatch({\r\n        type: \"setTimeout\",\r\n        payload: val\r\n      });\r\n    },\r\n\r\n    logoutOnAdmin: () => {\r\n      dispatch({\r\n        type: \"logoutOnAdmin\",\r\n        payload: \" \"\r\n      });\r\n    },\r\n    logoutForSideNav: () => {\r\n      dispatch({\r\n        type: \"logoutForSideNav\",\r\n        payload: \" \"\r\n      });\r\n    },\r\n    logoutForUpperMenu: () => {\r\n      dispatch({\r\n        type: \"logoutForUpperMenu\",\r\n        payload: \" \"\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AdminSideNav);\r\n"]},"metadata":{},"sourceType":"module"}