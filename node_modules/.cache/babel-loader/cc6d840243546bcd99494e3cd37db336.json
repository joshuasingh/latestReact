{"ast":null,"code":"import _classCallCheck from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\towards Future\\\\project1\\\\React client\\\\latestReact\\\\src\\\\components\\\\ImageSlideElab.js\";\nimport React from \"react\";\nimport $ from \"jquery\";\nimport { connect } from \"react-redux\";\n\nvar ImageSlideElab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ImageSlideElab, _React$Component);\n\n  //storing all image divs reference\n  function ImageSlideElab(props) {\n    var _this;\n\n    _classCallCheck(this, ImageSlideElab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageSlideElab).call(this, props));\n    _this.inputRes = [];\n    _this.all_pics = [];\n    _this.image_index = 0;\n    _this.all_pics = _this.props.picData;\n    console.log(\"image constructor\");\n    _this.putBorder = _this.putBorder.bind(_assertThisInitialized(_this));\n    _this.setRefs = _this.setRefs.bind(_assertThisInitialized(_this));\n    _this.testingFunc = _this.testingFunc.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ImageSlideElab, [{\n    key: \"scroll\",\n    value: function scroll(direction) {\n      var far = $(\".image-container\").width() / 2 * direction;\n      var pos = $(\".image-container\").scrollLeft() + far;\n      $(\".image-container\").animate({\n        scrollLeft: pos\n      }, 1000);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(arg, ind) {\n      console.log(\"added ref\" + this.inputRes.length + \" index \" + ind);\n      this.inputRes[ind] = arg;\n    }\n  }, {\n    key: \"putBorder\",\n    value: function putBorder(currentSel) {\n      this.props.clicked(currentSel, this.props.position);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //giving reference\n      this.props.giveRef(this);\n    }\n  }, {\n    key: \"testingFunc\",\n    value: function testingFunc() {\n      console.log(\"testing function called \", this.props.updateClick.history[this.props.position].currentSelected);\n\n      try {\n        this.inputRes[this.props.updateClick.history[this.props.position].currentSelected].id = \"\";\n      } catch (e) {}\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.image_index = 0;\n      this.inputRes = [];\n      this.all_pics = this.props.picData;\n      console.log(\"rendering image\", this.all_pics);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"prev\",\n        onClick: this.scroll.bind(null, -1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"\\u2770\"), React.createElement(\"div\", {\n        className: \"image-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.props.picData.length === 0 ? React.createElement(\"div\", {\n        className: \"noImageMsg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"NO RELATED IMAGES FOUND\") : this.props.picData.map(function (item, kk) {\n        return React.createElement(\"div\", {\n          className: \"image\",\n          onClick: function onClick() {\n            _this2.props.selectImageForView(_this2.props.position, item.url, item.caption);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: item.url,\n          alt: \"\",\n          onerror: \"this.onerror=null;this.src='https://picsum.photos/200';\",\n          className: \"imgStyle\",\n          ref: function ref(ree) {\n            _this2.setRefs(ree, kk);\n          },\n          id: \"\",\n          onClick: function onClick() {\n            _this2.putBorder(kk);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n      })), React.createElement(\"a\", {\n        className: \"next\",\n        onClick: this.scroll.bind(null, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"\\u2771\"))), \";\");\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(\"in update of image elab\", this.props.position, this.props.updateClick.history);\n\n      try {\n        //info for current selected images\n        var allIt = this.props.updateClick.history[this.props.position];\n        console.log(\"read allit\", allIt); //for the first click\n\n        if (allIt.status === 0) {\n          console.log(\"in image elab 000\");\n          this.inputRes[allIt.currentSelected].id = \"imageClick_before\";\n          this.inputRes[allIt.previousSelected].id = \"\";\n        } //if the image tab has been opened before also\n        else if (allIt.status === 1) {\n            console.log(\"in image elab 1111\");\n\n            if (allIt.currentSelected !== -1) {\n              this.inputRes[allIt.currentSelected].id = \"imageClick_before\";\n            }\n          } //if the image tab is opened for the first time or we are removing the border from the image\n          else if (allIt.status === -1) {\n              console.log(\"in  image elab comp update \", allIt.currentSelected);\n              this.inputRes[allIt.previousSelected].id = \"\";\n            }\n      } catch (e) {\n        console.log(\"error in image elab\", e);\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return true;\n    }\n  }]);\n\n  return ImageSlideElab;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    updateClick: state.ImageSelection\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clicked: function clicked(currentSel, index) {\n      dispatch({\n        type: \"setClick\",\n        payload: {\n          currentSel: currentSel,\n          index: index\n        }\n      });\n    },\n    giveRef: function giveRef(val) {\n      dispatch({\n        type: \"ImageSliderRefer\",\n        payload: val\n      });\n    },\n    selectImageForView: function selectImageForView(index, url, caption) {\n      dispatch({\n        type: \"setImageStatus\",\n        payload: {\n          index: index,\n          url: url,\n          caption: caption\n        }\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageSlideElab);","map":{"version":3,"sources":["D:/towards Future/project1/React client/latestReact/src/components/ImageSlideElab.js"],"names":["React","$","connect","ImageSlideElab","props","inputRes","all_pics","image_index","picData","console","log","putBorder","bind","setRefs","testingFunc","direction","far","width","pos","scrollLeft","animate","arg","ind","length","currentSel","clicked","position","giveRef","updateClick","history","currentSelected","id","e","scroll","map","item","kk","selectImageForView","url","caption","ree","allIt","status","previousSelected","Component","mapStateToProps","state","ImageSelection","mapDispatchToProps","dispatch","index","type","payload","val"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ImageSlideElab extends React.Component {\r\n  //storing all image divs reference\r\n  inputRes = [];\r\n  all_pics = [];\r\n  image_index = 0;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.all_pics = this.props.picData;\r\n    console.log(\"image constructor\");\r\n\r\n    this.putBorder = this.putBorder.bind(this);\r\n    this.setRefs = this.setRefs.bind(this);\r\n    this.testingFunc = this.testingFunc.bind(this);\r\n  }\r\n\r\n  scroll(direction) {\r\n    let far = ($(\".image-container\").width() / 2) * direction;\r\n    let pos = $(\".image-container\").scrollLeft() + far;\r\n    $(\".image-container\").animate({ scrollLeft: pos }, 1000);\r\n  }\r\n  our;\r\n\r\n  setRefs(arg, ind) {\r\n    console.log(\"added ref\" + this.inputRes.length + \" index \" + ind);\r\n    this.inputRes[ind] = arg;\r\n  }\r\n\r\n  putBorder(currentSel) {\r\n    this.props.clicked(currentSel, this.props.position);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //giving reference\r\n\r\n    this.props.giveRef(this);\r\n  }\r\n\r\n  testingFunc() {\r\n    console.log(\r\n      \"testing function called \",\r\n      this.props.updateClick.history[this.props.position].currentSelected\r\n    );\r\n    try {\r\n      this.inputRes[\r\n        this.props.updateClick.history[this.props.position].currentSelected\r\n      ].id = \"\";\r\n    } catch (e) {}\r\n  }\r\n\r\n  render() {\r\n    this.image_index = 0;\r\n    this.inputRes = [];\r\n    this.all_pics = this.props.picData;\r\n\r\n    console.log(\"rendering image\", this.all_pics);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"main\">\r\n          <div className=\"wrapper\">\r\n            <a className=\"prev\" onClick={this.scroll.bind(null, -1)}>\r\n              &#10096;\r\n            </a>\r\n            <div className=\"image-container\">\r\n              {this.props.picData.length === 0 ? (\r\n                <div className=\"noImageMsg\">NO RELATED IMAGES FOUND</div>\r\n              ) : (\r\n                this.props.picData.map((item, kk) => {\r\n                  return (\r\n                    <div\r\n                      className=\"image\"\r\n                      onClick={() => {\r\n                        this.props.selectImageForView(\r\n                          this.props.position,\r\n                          item.url,\r\n                          item.caption\r\n                        );\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={item.url}\r\n                        alt=\"\"\r\n                        onerror=\"this.onerror=null;this.src='https://picsum.photos/200';\"\r\n                        className=\"imgStyle\"\r\n                        ref={ree => {\r\n                          this.setRefs(ree, kk);\r\n                        }}\r\n                        id=\"\"\r\n                        onClick={() => {\r\n                          this.putBorder(kk);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })\r\n              )}\r\n            </div>\r\n            <a className=\"next\" onClick={this.scroll.bind(null, 1)}>\r\n              &#10097;\r\n            </a>\r\n          </div>\r\n        </div>\r\n        ;\r\n      </>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\r\n      \"in update of image elab\",\r\n      this.props.position,\r\n      this.props.updateClick.history\r\n    );\r\n\r\n    try {\r\n      //info for current selected images\r\n      var allIt = this.props.updateClick.history[this.props.position];\r\n      console.log(\"read allit\", allIt);\r\n\r\n      //for the first click\r\n      if (allIt.status === 0) {\r\n        console.log(\"in image elab 000\");\r\n        this.inputRes[allIt.currentSelected].id = \"imageClick_before\";\r\n        this.inputRes[allIt.previousSelected].id = \"\";\r\n      }\r\n      //if the image tab has been opened before also\r\n      else if (allIt.status === 1) {\r\n        console.log(\"in image elab 1111\");\r\n        if (allIt.currentSelected !== -1) {\r\n          this.inputRes[allIt.currentSelected].id = \"imageClick_before\";\r\n        }\r\n      } //if the image tab is opened for the first time or we are removing the border from the image\r\n      else if (allIt.status === -1) {\r\n        console.log(\"in  image elab comp update \", allIt.currentSelected);\r\n        this.inputRes[allIt.previousSelected].id = \"\";\r\n      }\r\n    } catch (e) {\r\n      console.log(\"error in image elab\", e);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    return true;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    updateClick: state.ImageSelection\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    clicked: (currentSel, index) => {\r\n      dispatch({\r\n        type: \"setClick\",\r\n        payload: { currentSel, index }\r\n      });\r\n    },\r\n    giveRef: val => {\r\n      dispatch({\r\n        type: \"ImageSliderRefer\",\r\n        payload: val\r\n      });\r\n    },\r\n    selectImageForView: (index, url, caption) => {\r\n      dispatch({\r\n        type: \"setImageStatus\",\r\n        payload: { index, url, caption }\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ImageSlideElab);\r\n"]},"metadata":{},"sourceType":"module"}